name: CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  CARGO_REGISTRY_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Rust Cache
      uses: Swatinem/rust-cache@v2
      
    - name: Build
      run: cargo build --verbose
      
    - name: Run tests
      run: cargo test --verbose

  release:
    name: Release
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
      packages: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Check version change
      id: check_version
      run: |
        git fetch origin
        CURRENT_VERSION=$(cargo metadata --format-version 1 | jq -r '.packages[0].version')
        git checkout HEAD^1
        PREVIOUS_VERSION=$(cargo metadata --format-version 1 | jq -r '.packages[0].version')
        git checkout -
        if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
          echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "Version unchanged"
          echo "changed=false" >> $GITHUB_OUTPUT
        fi

    - name: Install Rust
      if: steps.check_version.outputs.changed == 'true'
      uses: dtolnay/rust-toolchain@stable

    - name: Rust Cache
      if: steps.check_version.outputs.changed == 'true'
      uses: Swatinem/rust-cache@v2

    - name: Build Release (Linux)
      if: steps.check_version.outputs.changed == 'true'
      run: |
        cargo build --release
        tar czf chun-linux-x86_64.tar.gz -C target/release chun

    - name: Build Release (macOS)
      if: steps.check_version.outputs.changed == 'true'
      uses: actions/checkout@v4
      with:
        path: macos-build

    - name: Setup macOS build
      if: steps.check_version.outputs.changed == 'true'
      uses: actions/setup-go@v4
      with:
        go-version: '>=1.20.0'

    - name: Build macOS binary
      if: steps.check_version.outputs.changed == 'true'
      run: |
        cd macos-build
        GOOS=darwin GOARCH=amd64 cargo build --release
        tar czf chun-macos-x86_64.tar.gz -C target/release chun

    - name: Create Tag
      if: steps.check_version.outputs.changed == 'true'
      run: |
        git tag "v${{ steps.check_version.outputs.version }}"
        git push origin "v${{ steps.check_version.outputs.version }}"

    - name: Create Release
      if: steps.check_version.outputs.changed == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.check_version.outputs.version }}
        files: |
          chun-linux-x86_64.tar.gz
          macos-build/chun-macos-x86_64.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish to GitHub Packages
      if: steps.check_version.outputs.changed == 'true'
      run: cargo publish --registry github 